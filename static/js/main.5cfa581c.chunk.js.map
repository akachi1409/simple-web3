{"version":3,"sources":["redux/blockchain/blockchainReducer.js","redux/data/dataReducer.js","redux/store.js","redux/data/dataActions.js","redux/blockchain/blockchainActions.js","components/mint/mint.js","App.js","reportWebVitals.js","index.js"],"names":["initialState","loading","account","smartContract","web3","errorMsg","blockchainReducer","state","action","type","payload","name","totalSupply","maxSupply","error","dataReducer","rootReducer","combineReducers","blockchain","data","middleware","thunk","composeEnhancers","compose","applyMiddleware","store","createStore","fetchDataFailed","fetchData","dispatch","a","getState","methods","call","console","log","connectFailed","updateAccount","Mint","useDispatch","useSelector","useState","setFeedback","claimingNft","setClaimingNft","mintNum","setMintNum","getData","useEffect","className","id","Container","Row","Col","md","xs","ProgressBar","variant","now","symbol","color","size","onClick","e","preventDefault","window","ethereum","isMetaMask","Web3EthContract","setProvider","Web3","request","method","accounts","SmartContractObj","SmartContract","on","location","reload","style","textAlign","fontSize","_amount","document","getElementById","textContent","mint","send","gasLimit","to","from","value","utils","toWei","toString","once","err","then","receipt","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.5cfa581c.chunk.js","sourcesContent":["const initialState = {\r\n  loading: false,\r\n  account: null,\r\n  smartContract: null,\r\n  web3: null,\r\n  errorMsg: \"\",\r\n};\r\n\r\nconst blockchainReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"CONNECTION_REQUEST\":\r\n      return {\r\n        ...initialState,\r\n        loading: true,\r\n      };\r\n    case \"CONNECTION_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        account: action.payload.account,\r\n        smartContract: action.payload.smartContract,\r\n        web3: action.payload.web3,\r\n      };\r\n    case \"CONNECTION_FAILED\":\r\n      return {\r\n        ...initialState,\r\n        loading: false,\r\n        errorMsg: action.payload,\r\n      };\r\n    case \"UPDATE_ACCOUNT\":\r\n      return {\r\n        ...state,\r\n        account: action.payload.account,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default blockchainReducer;\r\n","const initialState = {\r\n  loading: false,\r\n  name: \"\",\r\n  totalSupply: 0,\r\n  maxSupply: 0,\r\n  error: false,\r\n  errorMsg: \"\",\r\n};\r\n\r\nconst dataReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"CHECK_DATA_REQUEST\":\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        error: false,\r\n        errorMsg: \"\",\r\n      };\r\n    case \"CHECK_DATA_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        name: action.payload.name,\r\n        totalSupply: action.payload.totalSupply,\r\n        maxSupply: action.payload.maxSupply,\r\n        error: false,\r\n        errorMsg: \"\",\r\n      };\r\n    case \"CHECK_DATA_FAILED\":\r\n      return {\r\n        ...initialState,\r\n        loading: false,\r\n        error: true,\r\n        errorMsg: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default dataReducer;\r\n","import { applyMiddleware, compose, createStore, combineReducers } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport blockchainReducer from \"./blockchain/blockchainReducer\";\r\nimport dataReducer from \"./data/dataReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  blockchain: blockchainReducer,\r\n  data: dataReducer,\r\n});\r\n\r\nconst middleware = [thunk];\r\nconst composeEnhancers = compose(applyMiddleware(...middleware));\r\n\r\nconst configureStore = () => {\r\n  return createStore(rootReducer, composeEnhancers);\r\n};\r\n\r\nconst store = configureStore();\r\n\r\nexport default store;\r\n","// log\r\nimport store from \"../store\";\r\n\r\nconst fetchDataRequest = () => {\r\n  return {\r\n    type: \"CHECK_DATA_REQUEST\",\r\n  };\r\n};\r\n\r\nconst fetchDataSuccess = (payload) => {\r\n  return {\r\n    type: \"CHECK_DATA_SUCCESS\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nconst fetchDataFailed = (payload) => {\r\n  return {\r\n    type: \"CHECK_DATA_FAILED\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const fetchData = (account) => {\r\n  return async (dispatch) => {\r\n    dispatch(fetchDataRequest());\r\n    try {\r\n      let name = await store\r\n        .getState()\r\n        .blockchain.smartContract.methods.name()\r\n        .call();\r\n      let totalSupply = await store\r\n        .getState()\r\n        .blockchain.smartContract.methods.totalSupply()\r\n        .call();\r\n      let maxSupply = await store\r\n        .getState()\r\n        .blockchain.smartContract.methods.maxSupply()\r\n        .call();\r\n      // let cost = await store\r\n      //   .getState()\r\n      //   .blockchain.smartContract.methods.cost()\r\n      //   .call();\r\n      // console.log(\"data\", name, totalSupply, maxSupply)\r\n      dispatch(\r\n        fetchDataSuccess({\r\n          name,\r\n          totalSupply,\r\n          maxSupply,\r\n        })\r\n      );\r\n    } catch (err) {\r\n      console.log(err);\r\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\r\n    }\r\n  };\r\n};\r\n","// constants\r\nimport Web3EthContract from \"web3-eth-contract\";\r\nimport Web3 from \"web3\";\r\nimport SmartContract from \"../../contracts/Doodlenauts.json\";\r\n// log\r\nimport { fetchData } from \"../data/dataActions\";\r\n\r\nconst connectRequest = () => {\r\n  return {\r\n    type: \"CONNECTION_REQUEST\",\r\n  };\r\n};\r\n\r\nconst connectSuccess = (payload) => {\r\n  return {\r\n    type: \"CONNECTION_SUCCESS\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nconst connectFailed = (payload) => {\r\n  return {\r\n    type: \"CONNECTION_FAILED\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nconst updateAccountRequest = (payload) => {\r\n  return {\r\n    type: \"UPDATE_ACCOUNT\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const connect = () => {\r\n  console.log(\"--:\")\r\n  return async (dispatch) => {\r\n    dispatch(connectRequest());\r\n    const { ethereum } = window;\r\n    const metamaskIsInstalled = ethereum && ethereum.isMetaMask;\r\n    if (metamaskIsInstalled) {\r\n      Web3EthContract.setProvider(ethereum);\r\n      let web3 = new Web3(ethereum);\r\n      try {\r\n        const accounts = await ethereum.request({\r\n          method: \"eth_requestAccounts\",\r\n        });\r\n        const networkId = await ethereum.request({\r\n          method: \"net_version\",\r\n        });\r\n        // const NetworkData = await SmartContract.networks[networkId];\r\n        if (networkId == 1) { // IMPORTANT. ONCE YOUR CONTRACT IS ON THE MAIN NET, SWITCH THIS NUMBER TO 1.\r\n          const SmartContractObj = new Web3EthContract(\r\n            SmartContract,\r\n            \"0x8d4B648F7fAB1c72d1690b42693fb7525ce3025e\" // **IMPORTANT** PASTE CONTRACT ADDRESS HERE\r\n          );\r\n          dispatch(\r\n            connectSuccess({\r\n              account: accounts[0],\r\n              smartContract: SmartContractObj,\r\n              web3: web3,\r\n            })\r\n          );\r\n          // Add listeners start\r\n          ethereum.on(\"accountsChanged\", (accounts) => {\r\n            dispatch(updateAccount(accounts[0]));\r\n          });\r\n          ethereum.on(\"chainChanged\", () => {\r\n            window.location.reload();\r\n          });\r\n          // Add listeners end\r\n        } else {\r\n          dispatch(connectFailed(\"Change network to Ethereum.\"));\r\n        }\r\n      } catch (err) {\r\n        dispatch(connectFailed(\"Something went wrong.\"));\r\n      }\r\n    } else {\r\n      dispatch(connectFailed(\"Please install Metamask.\"));\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateAccount = (account) => {\r\n  return async (dispatch) => {\r\n    dispatch(updateAccountRequest({ account: account }));\r\n    dispatch(fetchData(account));\r\n  };\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Container, Row, Col, ProgressBar} from \"react-bootstrap\";\r\n\r\n//import Assets\r\nimport { BsFileMinusFill, BsFilePlusFill } from 'react-icons/bs';\r\n\r\n//import CSS\r\nimport './mint.css';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { connect } from \"../../redux/blockchain/blockchainActions\";\r\nimport { fetchData } from \"../../redux/data/dataActions\";\r\nfunction Mint(){\r\n    const dispatch = useDispatch();\r\n    const blockchain = useSelector((state) => state.blockchain);\r\n    const data = useSelector((state) => state.data);\r\n    const [feedback, setFeedback] = useState(\"\");\r\n    const [claimingNft, setClaimingNft] = useState(false);\r\n    const [mintNum, setMintNum] = useState(0)\r\n    const claimNFTs = (_amount) => {\r\n        _amount = document.getElementById(\"inputBox\").textContent;\r\n        if (_amount <= 0) {\r\n            return;\r\n        }\r\n        setFeedback(\"Minting your Official BooCrew NFT...\");\r\n        setClaimingNft(true);\r\n        blockchain.smartContract.methods\r\n            .mint(blockchain.account, _amount)\r\n            // ********\r\n            // You can change the line above to\r\n            // .whiteListMint(blockchain.account, _amount) if you want only whitelisted\r\n            // users to be able to mint through your website!\r\n            // And after you're done with whitelisted users buying from your website,\r\n            // You can switch it back to .mint(blockchain.account, _amount).\r\n            // ********\r\n            .send({\r\n                gasLimit: 285000 * _amount,\r\n                to: \"0x8815e06FC5b57Bd4d5590977a697582f19d2330e\", // the address of your contract\r\n                from: blockchain.account,\r\n                value: blockchain.web3.utils.toWei((0 * _amount).toString(), \"ether\"),\r\n            })\r\n            .once(\"error\", (err) => {\r\n                console.log(err);\r\n                setFeedback(\"Sorry, something went wrong. Check your transaction on Etherscan to find out what happened!\");\r\n                setClaimingNft(false);\r\n            })\r\n            .then((receipt) => {\r\n                setFeedback(\r\n                    \"Your BooCrew NFT has been successfully minted!\"\r\n                );\r\n                setClaimingNft(false);\r\n                dispatch(fetchData(blockchain.account));\r\n            });\r\n    };\r\n\r\n    const getData = () => {\r\n        if (blockchain.account !== \"\" && blockchain.smartContract !== null) {\r\n            dispatch(fetchData(blockchain.account));\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        getData();\r\n    }, [blockchain.account]);\r\n\r\n    const plus_num = () =>{\r\n        // const {mintNum} = this.state;\r\n        setMintNum(mintNum +1);\r\n    }\r\n    const minus_num = () =>{\r\n        // const {mintNum} = this.state;\r\n        if ( mintNum ==0)return;\r\n        setMintNum(mintNum -1)\r\n    }\r\n    // console.log(data.totalSupply/data.maxSupply*100)\r\n    return (\r\n        <div className='mint-control' id='mint'>\r\n            <div className='mint-background'>\r\n                <Container>\r\n                    <Row>\r\n                        <Col md={12} xs={12} className='mint-description'>\r\n                            <header>MINT YOUR FREE PUNKED APE <br/> BELLOW</header>\r\n                            <p>\r\n                                CONNECT YOUR WALLET AND PAY GAS TO CLAIM\r\n                            </p>\r\n                            {\r\n                                data.maxSupply===0 ?\r\n                                <ProgressBar  variant=\"success\" now={0}  symbol={0} className='mint-progress'/>\r\n                                :\r\n                                <ProgressBar  variant=\"success\" now={data.totalSupply/data.maxSupply*100}  symbol={data.totalSupply/data.maxSupply*100} className='mint-progress'/>\r\n                            }\r\n                            \r\n                            <div className='number-control'>\r\n                                <BsFileMinusFill color='white' size={40} onClick = {()=> minus_num()}/>\r\n                                <span id = \"inputBox\">{mintNum}</span>\r\n                                <BsFilePlusFill color='white' size={40} onClick = {() => plus_num()}/>\r\n                            </div>\r\n                            {\r\n                            blockchain.account === \"\" || blockchain.smartContract === null ? \r\n                            <div className=\"flex-column\">\r\n                            <button className='ybutton' \r\n                            onClick={(e) => {\r\n                                console.log(\"--------\")\r\n                                e.preventDefault();\r\n                                dispatch(connect());\r\n                                getData();\r\n                            }}>Connect</button>\r\n                            {blockchain.errorMsg !== \"\" ? (\r\n                                <span style={{ textAlign: \"center\", fontSize: 12, color: \"white\"}}>\r\n                                        {blockchain.errorMsg}\r\n                                    </span>\r\n                                \r\n                            ) : null}\r\n                            </div>\r\n                            :\r\n                            <button className='ybutton'\r\n                            onClick={(e) => {\r\n                                e.preventDefault();\r\n                                claimNFTs(10);\r\n                                getData();\r\n                            }}>{claimingNft ? \"BUSY\" : \"MINT\"}</button>\r\n                        }\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Mint;","// import logo from './logo.svg';\r\nimport './App.css';\r\n\r\n//import components\r\nimport Mint from './components/mint/mint';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Mint />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport store from \"./redux/store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}